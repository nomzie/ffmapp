{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","users","newUserModal","editUserModal","newUserData","id","title","completed","editUserData","this","_refreshUser","setState","axios","post","then","response","console","log","data","push","body","put","delete","get","map","user","key","Button","color","size","className","onClick","editUser","bind","deleteUser","toggleNewUserModal","Modal","isOpen","toggle","ModalHeader","ModalBody","FormGroup","Label","for","Input","type","value","onChange","e","target","ModalFooter","addUser","toggleEditUserModal","updateUser","Table","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ccb30c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Input, Label, FormGroup, Modal, ModalHeader, ModalBody, ModalFooter, Table, Button } from 'reactstrap';\n\nclass App extends Component {\n\n  // App's starting state\n  state = {\n    users: [], // at the start, users is an empty array\n    newUserModal: false,\n    editUserModal: false,\n    newUserData: { // create new variables to hold new book value\n      id: '',\n      title: '',\n      completed: ''\n    },\n    editUserData: { // create new variables to hold new book value\n      id: '',\n      title: '',\n      completed: ''\n    }\n  }\n\n  // After loading\n  componentWillMount(){\n    this._refreshUser();\n  }\n\n  // update the state of newUserModal\n  toggleNewUserModal(){\n    this.setState({\n      newUserModal: ! this.state.newUserModal // set state to opposite of the newBookModal so it can open and close modal\n    })\n  }\n\n  // update the state of editUserModal\n  toggleEditUserModal(){\n    this.setState({\n      editUserModal: ! this.state.editUserModal // set state to opposite of the editBookModal so it can open and close modal\n    })\n  }\n\n  // create function to add user through api\n  addUser(){\n    // send axios POST request to api\n    axios.post('https://jsonplaceholder.typicode.com/posts/', this.state.newUserData)\n    .then((response) => {\n      console.log(response.data); // log response body in console\n      let { users } = this.state; // update users array to current state (with the new user)\n      users.push(response.data); // push the new user to the response.data\n      this.setState({ // reset the state after adding new user\n        users, \n        newUserModal: false,\n        newUserData: {\n          id: '',\n          title: '',\n          completed: ''\n        }\n      })\n    })\n  }\n\n  // function to select that user to be edited\n  editUser(id, title, body){\n    //console.log(id, title, body); //use this line to test that it logs the values from the row of Edit button\n    this.setState({ \n      editUserData: { id, title, body },\n      editUserModal: !this.state.editUserModal\n    });\n  }\n\n  // function to update selected user's details\n  updateUser(){\n    let { title, body } = this.state.editUserData; // create variable to hold the edited user details\n    axios.put('https://jsonplaceholder.typicode.com/posts/' + this.state.editUserData.id, {\n      title, body\n    })\n    .then((response) => {\n      console.log(response.data); // log response body in console\n      this._refreshUser();\n      let { users } = this.state;\n      this.setState({\n        users,\n        editUserModal: false,\n        editUserData: {\n          id: '',\n          title: '',\n          completed: ''\n        }\n      })\n    })\n  }\n\n  // function to delete user\n  deleteUser(id){\n    axios.delete('https://jsonplaceholder.typicode.com/posts/' + id)\n    .then((response) => {\n      console.log(response.data); // log response body in console\n      this._refreshUser();\n    });\n  }\n\n  _refreshUser(){\n    // GET / Api / User\n    axios.get('https://jsonplaceholder.typicode.com/posts/')\n    .then((response) => {\n      // Set app state\n      this.setState({\n        users: response.data // return the values from api/users\n      })\n    });\n  }\n\n  render(){\n    // Create a variable called users to hold api values and put variable inside render\n    let users = this.state.users.map((user) => {\n      \n      // Return the below table\n      return(\n        <tr key={user.id}>\n              <td>{user.id}</td>\n              <td>{user.title}</td>\n              <td>{user.body}</td>\n              <td>\n                <Button color=\"success\" size=\"sm\" className=\"mr-2\" onClick={this.editUser.bind(this, user.id, user.title, user.body)}>Edit</Button>\n                <Button color=\"danger\" size=\"sm\" onClick={this.deleteUser.bind(this, user.id)}>Delete</Button>\n              </td>\n            </tr>\n      );\n    });\n    return(\n      <div className=\"App container\">\n\n      <h1>User Accounts</h1>\n\n        <Button className=\"my-3\" color=\"primary\" onClick={this.toggleNewUserModal.bind(this)}>Add User</Button>\n        <Modal isOpen={this.state.newUserModal} toggle={this.toggleNewUserModal.bind(this)}>\n          <ModalHeader toggle={this.toggleNewUserModal.bind(this)}>Add a new user</ModalHeader>\n          <ModalBody>\n            <FormGroup>\n              <Label for=\"id\">ID</Label>\n              <Input type=\"text\" id=\"id\" value={this.state.newUserData.id} onChange={(e) =>{\n                let { newUserData } = this.state;\n                newUserData.id = e.target.value;\n                this.setState({ newUserData });\n              }}/>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input type=\"text\" id=\"title\" value={this.state.newUserData.title} onChange={(e) =>{\n                let { newUserData } = this.state;\n                newUserData.title = e.target.value;\n                this.setState({ newUserData });\n              }}/>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"body\">Body</Label>\n              <Input type=\"text\" id=\"body\" value={this.state.newUserData.body} onChange={(e) =>{\n                let { newUserData } = this.state;\n                newUserData.body = e.target.value;\n                this.setState({ newUserData });\n              }}/>\n            </FormGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.addUser.bind(this)}>Add User</Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggleNewUserModal.bind(this)}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n\n        <Modal isOpen={this.state.editUserModal} toggle={this.toggleEditUserModal.bind(this)}>\n          <ModalHeader toggle={this.toggleEditUserModal.bind(this)}>Edit user details</ModalHeader>\n          <ModalBody>\n            <FormGroup>\n              <Label for=\"id\">ID</Label>\n              <Input type=\"text\" id=\"id\" value={this.state.editUserData.id} onChange={(e) =>{\n                let { editUserData } = this.state;\n                editUserData.id = e.target.value;\n                this.setState({ editUserData });\n              }}/>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input type=\"text\" id=\"title\" value={this.state.editUserData.title} onChange={(e) =>{\n                let { editUserData } = this.state;\n                editUserData.title = e.target.value;\n                this.setState({ editUserData });\n              }}/>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"body\">Body</Label>\n              <Input type=\"text\" id=\"body\" value={this.state.editUserData.body} onChange={(e) =>{\n                let { editUserData } = this.state;\n                editUserData.body = e.target.value;\n                this.setState({ editUserData });\n              }}/>\n            </FormGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.updateUser.bind(this)}>Save changes</Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggleEditUserModal.bind(this)}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n\n        <Table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Title</th>\n              <th>Body</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {users}\n          </tbody>\n        </Table>\n      </div>\n    );\n\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}